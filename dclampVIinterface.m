path('~/libMatlab',path);
%%
CLEARALL    = 1;
if CLEARALL
    clear all;
    close all;
    clc
end
%++++++++++++++++++++++++++++
% Stimulation parameters go here
DEBUG = 0;
FOLDER = './';
%CONFIGSFOLDER = '~/configurations';
SHUFFLE     = 1;
NOISE       = 0; % 1 uses OU noise. Define STD and TAU
FIXSEED     = 1; % 1 uses fixed seed (define SEED)
SEED        = 6792037;
STD         = 100;
TAU         = 5;
PRE_DUR     = 1; %s
DUR         = 3; 
POST_DUR    = 1;
MIN_I       = 00; %pA
MAX_I       = 350;
STEP        = 50;
N           = 20;
TSLEEP      = 15; %s
SRATE       = 15000;
AEC         = 0;
PLOT        = 1;
CFGNAME     = 'config.xml';
COLOR       = [0,0,0]; 
%+++++%++++++++++++++++++++++++++++
% Helper functions
genLine = @(dur,code,p1,p2,p3)sprintf('%d\t%d\t%d\t%d\t%d\t0\t0\t%d\t%d\t0\t0\t0\t',dur,code,p1,p2,p3,FIXSEED,SEED);
cfgOpen = @(file)fprintf(file,'<dynamicclamp>\n\t<entities>\n');
cfgAddRecorder = @(file,id)fprintf(file,['\n\t<entity>\n',...
                                         '\t\t<name>H5Recorder</name>\n',...
                                         '\t\t<id>%d</id>\n',...
                                         '\t\t<parameters>\n\t\t\t<compress>false</compress>\n\t\t</parameters>\n',...
                                         '\t</entity>\n'],id);
%warning 'con' is a string!
cfgAddLIF = @(file,id,C,tau,tarp,Er,E0,Vth,Iext,con)...
                           fprintf(file,['\n\t<entity>\n',...
                                         '\t\t<name>LIFNeuron</name>\n',...
                                         '\t\t<id>%d</id>\n',...
                                         '\t\t<parameters>\n',...
                                         '\t\t\t<C>%f</C>\n',...
                                         '\t\t\t<tau>%f</tau>\n',...
                                         '\t\t\t<tarp>%f</tarp>\n',...
                                         '\t\t\t<Er>%f</Er>\n',...
                                         '\t\t\t<E0>%f</E0>\n',...
                                         '\t\t\t<Vth>%f</Vth>\n',...
                                         '\t\t\t<Iext>%f</Iext>\n',...
                                         '\t\t</parameters>\n',...
                                         '\t\t<connections>%s</connections>\n',...
                                         '\t</entity>\n'],id,C,tau,tarp,Er,E0,Vth,Iext,con);
 cfgAddRealNeuron = @(file,id,con)...
                           fprintf(file,['\n\t<entity>\n',...
                                         '\t\t<name>RealNeuron</name>\n',...
                                         '\t\t<id>%d</id>\n',...
                                         '\t\t<parameters>\n',...
                                         '\t\t\t<spikeThreshold>0</spikeThreshold>\n',...
                                         '\t\t\t<V0>-65</V0>\n',...
                                         '\t\t\t<deviceFile>/dev/comedi0</deviceFile>\n',...
					 '\t\t\t<inputSubdevice>0</inputSubdevice>\n',....
					 '\t\t\t<outputSubdevice>1</outputSubdevice>\n',....
					 '\t\t\t<inputRange>[-10,+10]</inputRange>\n',....
					 '\t\t\t<readChannel>0</readChannel>\n',...
					 '\t\t\t<writeChannel>0</writeChannel>\n',...
					 '\t\t\t<inputConversionFactor>20</inputConversionFactor>\n',...
					 '\t\t\t<outputConversionFactor>0.00025</outputConversionFactor>\n',...
					 '\t\t\t<holdLastValue>true</holdLastValue>\n',...
					 '\t\t\t<reference>GRSE</reference>\n',...
                                         '\t\t</parameters>\n',...
                                         '\t\t<connections>%s</connections>\n',...
                                         '\t</entity>\n'],id,con);                                    
cfgAddWaveform = @(file,id,fname,con)fprintf(file,['\n\t<entity>\n',...
                                         '\t\t<name>Waveform</name>\n',...
                                         '\t\t<id>%d</id>\n',...
                                         '\t\t<parameters>\n',...
                                         '\t\t\t<filename>%s</filename>\n',...
                                         '\t\t</parameters>\n',...
                                         '\t\t<connections>%s</connections>\n',...
                                         '\t</entity>\n'],id,fname,con);
cfgClose = @(file,srate,tend)fprintf(file,['\n\t</entities>\n\t<simulation>\n',...
                                           '\t\t<rate>%d</rate>\n',...
                                           '\t\t<tend>%f</tend>\n',...
                                           '\t</simulation>\n',...
                                            '</dynamicclamp>\n'],srate,tend);
%++++++++++++++++++++++++++++
% Generate amplitudes and permute if required
previousFolder = pwd;
if ~isdir(FOLDER),error(['Could not find folder [',FOLDER,']']),end
%if ~isdir(CONFIGSFOLDER),error(['Could not find configurations folder [',CONFIGSFOLDER,']']),end
cd(FOLDER);
nTrials = N*length(MIN_I:STEP:MAX_I);
amp = zeros(1,nTrials);
for nn = 1:N
    if SHUFFLE
        idx = randperm(floor(nTrials/N))+(nn-1)*floor(nTrials/N);
    else
        idx = (nn-1)*floor(nTrials/N)+1:nn*floor(nTrials/N);
    end
    amp(idx) = [MIN_I:STEP:MAX_I];
end
fprintf(['Recording to folder: %s.\nGenerated %d trials.',...
         '\nNumber of Batches: %d.',...
         '\n\tMin amplitude %d pA.\n\t',...
         'Step size %d pA.\n\tMax %d pA.\n\t'],...
         pwd,floor(nTrials/N),N,MIN_I,STEP,MAX_I);
if SHUFFLE
    fprintf('Shuffled orded in each batch.\n');
else
    fprintf('Linearly incremented amplitude.\n')
end
% let matlab handle inter-trial interval
% generate one trial at a time

if NOISE;code=2;else code=1;STD=0;TAU=0;end
counter=0;
if AEC && ~exist('kernel.dat','file')
    fprintf(['\nUsing online Active Electrode compensation (AEC).\n',...
        'You did not run "kernel_protocol" on folder [%s].\n',...
        '(Do it now and press any key to continue)\n\n'],pwd);
    pause
    if ~exist('kernel.dat','file')
        error('Could not find "kernel.dat" file. Can not use AEC.')
    end
end
fig=figure(1);clf;
set(fig,'color','w', 'WindowStyle', 'docked')
ax = axes();
hold on;
ax1 = axes();
plt=[];
hold on;
for ii = 1:length(amp)
    A = amp(ii);
    % +++++++++ Write stim file ++++++++++++++++++
    stimFile = {genLine(PRE_DUR,1,0,0,0),...
                genLine(DUR,code,A,STD,TAU),...
                genLine(POST_DUR,1,0,0,0)};
    stimfname = sprintf('stim%02d.stim',counter);
    counter=counter+1;
    % stimulus file
    fid=fopen(stimfname,'w');
    cellfun(@(x)fprintf(fid,'%s\n',x),stimFile);
    fclose(fid);
    % tend
    stimFile=cell2mat(cellfun(@(x)str2num(x),stimFile,'UniformOutput',0)');
    tstim=sum(stimFile(:,1));
    % prepare configuration file
    fid=fopen(CFGNAME,'w');
    cfgOpen(fid);
    cfgAddRecorder(fid,0);
    if DEBUG
        cfgAddLIF(fid,1,0.08,0.0075,0.0014,-65.2,-70,-50,220,'0');
    else
        cfgAddRealNeuron(fid,1,'0');
    end
    cfgAddWaveform(fid,2,stimfname,'0,1');
    cfgClose(fid,SRATE,tstim);
    % ++++++++++++++ Run dclamp ++++++++++++++++++
    if ~system(sprintf('dclamp -c %s 2>> dclamplog.out',CFGNAME))
        if PLOT
            files = dir('*.h5');
            [entities,info] = loadH5Trace(files(end).name);
            t=[0:length(entities(1).data)-1].*info.dt;
            axes(ax);
            plt(end+1)=plot(t,entities(1).data,'color',COLOR);
            set(ax,'position',[0.08,0.08,0.6,0.8],'box','off','color','none',...
                'linewidth',1,'ycolor','k','xcolor','k','fontname','arial','fontsize',10)
            set(ax1,'position',[0.75,0.45,0.3,0.4],'box','off','color','none',...
                'linewidth',1,'ycolor','k','xcolor','k','fontname','arial','fontsize',10)
            axes(ax1)
            plot(ii,A,'ro')
        end
    else
        error('Could not run dclamp, check "dclamplog.out"!');
    end
    fprintf('>> Finished trial (%d of %d) amplitude: %f, sleeping %fs.\n',ii,length(amp),A,TSLEEP);
    pause(TSLEEP)
end

cd(previousFolder)
